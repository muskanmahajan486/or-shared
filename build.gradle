buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
    }
}

apply plugin: "java"
apply plugin: "nebula.optional-base"
apply plugin: "maven-publish"

sourceCompatibility = 1.7
version = projectVersion

repositories {
    jcenter();
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/google-snapshots/"
    }
    maven {
        url "http://4thline.org/m2"
    }
    maven {
        url "http://maven2.gueck.com/releases"
    }
    maven {
        url "http://nexus.seamless.org/content/groups/public/"
    }
}

dependencies {
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion", optional
    compile "com.google.gwt:gwt-user:$gwtVersion", optional

    testCompile "org.testng:testng:$testngVersion"
    testCompile "org.slf4j:slf4j-api:$slf4jVersion"
    testCompile "ch.qos.logback:logback-classic:$logbackVersion"

}

test {
    dependsOn testClasses
    useTestNG() {
        suites "src/test/AllTests.tng.xml"
    }
}

jar {
    from sourceSets.main.allSource
}

publishing {
    repositories {
        maven {
            url "${artifactRepoBase}/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials() {
                username artifactRepoUsername
                password hasProperty("artifactRepoPassword") ? artifactRepoPassword : "SECRET"
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId projectGroupId
            artifactId rootProject.name
            version = projectVersion
        }
    }
}

// TODO http://forums.gradle.org/gradle/topics/maven_publish_plugin_generated_pom_making_dependency_scope_runtime
publishing.publications.all {
    pom.withXml {
        asNode().dependencies.'*'.findAll() {
            it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
                dep.name == it.artifactId.text()
            }
        }.each { it.scope*.value = 'compile'}
    }
}